//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LogicaDelNegocio.ContraseñaHard {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ContraseñaHard.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Comprobar", ReplyAction="http://tempuri.org/IService1/ComprobarResponse")]
        bool Comprobar(string pass, string clave);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Comprobar", ReplyAction="http://tempuri.org/IService1/ComprobarResponse")]
        System.Threading.Tasks.Task<bool> ComprobarAsync(string pass, string clave);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : LogicaDelNegocio.ContraseñaHard.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<LogicaDelNegocio.ContraseñaHard.IService1>, LogicaDelNegocio.ContraseñaHard.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Comprobar(string pass, string clave) {
            return base.Channel.Comprobar(pass, clave);
        }
        
        public System.Threading.Tasks.Task<bool> ComprobarAsync(string pass, string clave) {
            return base.Channel.ComprobarAsync(pass, clave);
        }
    }
}
